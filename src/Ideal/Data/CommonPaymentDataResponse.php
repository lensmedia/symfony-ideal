<?php

declare(strict_types=1);

namespace Lens\Bundle\IdealBundle\Ideal\Data;

use Brick\Math\BigDecimal;
use DateTimeImmutable;
use Lens\Bundle\IdealBundle\Ideal\Data\Type\PaymentStatus;
use Symfony\Component\Validator\Constraints as Assert;

class CommonPaymentDataResponse
{
    /**
     * The timestamp from which the transaction operation will expire, expressed in UTC time
     * format (YYYY-MM-DDThh:mm:ss.sssZ).
     */
    public ?DateTimeImmutable $expiryDateTimestamp = null;

    /**
     * The amount guaranteed by the ASPSP/Issuer to the Merchant/CPSP. Will be provided if the min max amount values
     * are defined in the request
     *
     * Pattern: ^\d{1,13}\.\d{1,5}$
     */
    public ?BigDecimal $guaranteedAmount = null;

    /**
     * Payment status.
     */
    public PaymentStatus $paymentStatus;

    /**
     * ID generated by the Open Banking Service. This should be used to refer to this payment in subsequent api calls.
     */
    #[Assert\Length(min: 1, max: 35)]
    public string $paymentId;

    /**
     * ID used by the ASPSP/iDEAL Hub to refer to the payment.
     */
    #[Assert\Length(min: 1, max: 35)]
    public ?string $aspspPaymentId = null;

    /**
     * ID of the ASPSP selected by the PSU.
     */
    #[Assert\Length(min: 1, max: 35)]
    public ?string $aspspId = null;

    /**
     * Reference to the payment created by the Initiating Party. This ID will not be visible to the Payment Service
     * User.
     */
    #[Assert\Length(min: 1, max: 36)]
    public ?string $initiatingPartyReferenceId = null;

    /**
     * Information whether sufficient funding is available.
     */
    public ?bool $fundsAvailable = null;

    /**
     * All debtor relevant data.
     */
    public ?DebtorInformationResponse $debtorInformation = null;

    /**
     * Contains additional information about the fees and estimated amount.
     */
    public ?AmountRelatedDetails $amountRelatedDetails = null;

    /**
     * The data required for PSU authentication and transaction authorisation.
     */
    public ?AuthorisationRequiredData $authorisationRequiredData = null;

    /**
     * Text to be displayed to the PSU.
     */
    #[Assert\Length(min: 1, max: 1024)]
    public ?string $psuMessage = null;
}
